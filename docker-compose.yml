# Projenin tüm servislerini tanımlayan ana dosya
services:
  # 1. Zookeeper: Kafka'nın çalışması için gereklidir.
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # 2. Kafka Broker: Mesajlaşma kuyruğu.
  broker:
    image: confluentinc/cp-kafka:7.6.1
    container_name: broker
    hostname: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # Dışarıdan (localhost) ve içeriden (broker) erişim için adresler
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://127.0.0.1:9092
      # Tek sunuculu kurulum için gerekli ayarlar
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    # Bu sağlık kontrolü, diğer servislerin Kafka'nın hazır olmasını beklemesini sağlar
    healthcheck:
      test: "kafka-topics --bootstrap-server localhost:29092 --list"
      interval: 10s
      timeout: 5s
      retries: 5

  # 3. ksqlDB Server: SQL ile veri işleme motoru.
  ksqldb-server:
    image: confluentinc/ksqldb-server:0.29.0
    container_name: ksqldb-server
    hostname: ksqldb-server
    depends_on:
      broker:
        condition: service_healthy # Kafka'nın sağlıklı olmasını bekle
    ports:
      - "8088:8088" # Konteynerin 8088 portunu dış dünyaya açar. Standart ksqlDB portu budur.
    environment:
      # --- DÜZELTME: ksqlDB sunucusunun dinleyeceği port 8088 olarak değiştirildi. ---
      # Bu ayar, 'ports' bölümündeki ayarla tutarlı olmalıdır.
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: broker:29092
      # Otomatik topic oluşturma ayarları eklendi.
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"

  # 4. ksqlDB CLI: ksqlDB sunucusuna bağlanmak için komut satırı.
  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.29.0
    container_name: ksqldb-cli
    depends_on:
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  # 5. Python Producer: Veri üreticimiz.
  producer:
    build:
      # --- DÜZELTME: 'build' tanımı, proje yapınıza daha uygun hale getirildi. ---
      # Dockerfile'ın ana dizinde olduğunu varsayar.
      context: .
      dockerfile: producer.Dockerfile
    container_name: python-producer
    restart: unless-stopped
    env_file: ./.env # API anahtarını .env dosyasından okur
    depends_on:
      broker:
        condition: service_healthy # Kafka'nın sağlıklı olmasını bekle
    environment:
      # Konteyner içinden Kafka'ya bu adresle bağlanır
      KAFKA_BOOTSTRAP_SERVERS: 'broker:29092'

  # 6. Spring Boot App: Veri tüketicimiz ve API sunucumuz.
  springboot-app:
    build: ./springboot-app
    container_name: springboot-app
    restart: unless-stopped
    ports:
      - "8888:8888"
    # === YENİ BÖLÜM BURADA BAŞLIYOR ===
    environment:
      # application.properties dosyasındaki ayarları ezip geçiyoruz.
      # Spring Boot, bu büyük harfli değişkenleri otomatik olarak tanır.
      - SPRING_KAFKA_CONSUMER_GROUP_ID=final-crypto-project-group-v99
      - SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET=earliest
    # === YENİ BÖLÜM BURADA BİTİYOR ===
    depends_on:
      broker:
        condition: service_healthy
      ksqldb-server:
        condition: service_started